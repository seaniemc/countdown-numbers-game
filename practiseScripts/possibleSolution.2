#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.7 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 63 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 1
#"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1           0 610 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"#|;; A solver for the following puzzle:"
0 0 17 29 1 #"\n"
0 0 17 3 38 #";; Given 5 integers a, b, c, d, and e,"
0 0 17 29 1 #"\n"
0 0 17 3 104
(
 #";; find an expression that combines a, b, c, and d with arithmetic o"
 #"perations (+, -, *, and /) to get e."
) 0 0 17 29 1 #"\n"
0 0 17 3 1 #" "
0 0 17 29 1 #"\n"
0 0 17 3 16 #"(require srfi/1)"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"(require racket/generator)"
0 0 17 29 1 #"\n"
0 0 17 3 1 #" "
0 0 17 29 1 #"\n"
0 0 17 3 11 #"(define ops"
0 0 17 3 12 #" '(+ - * /))"
0 0 17 29 1 #"\n"
0 0 17 3 1 #" "
0 0 17 29 1 #"\n"
0 0 17 3 18 #"(define (splits l)"
0 0 17 29 1 #"\n"
0 0 17 3 41 #"  (for/list ([i (in-range 1 (length l))])"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"    (cons (take l i) (drop l i))))"
0 0 17 29 1 #"\n"
0 0 17 3 1 #" "
0 0 17 29 1 #"\n"
0 0 17 3 76
(
 #";; produces a sequence (usually lazy) of all possible combinations o"
 #"f `nums'"
) 0 0 17 29 1 #"\n"
0 0 17 3 28 #";; using operators in `ops'."
0 0 17 29 1 #"\n"
0 0 17 3 22 #"(define (combine nums)"
0 0 17 29 1 #"\n"
0 0 17 3 13 #"  (match nums"
0 0 17 29 1 #"\n"
0 0 17 3 30 #"    ['() (error \"impossible\")]"
0 0 17 29 1 #"\n"
0 0 17 3 23 #"    [(list x) (list x)]"
0 0 17 29 1 #"\n"
0 0 17 3 20 #"    [_ (in-generator"
0 0 17 29 1 #"\n"
0 0 17 3 37 #"        (for* ([halves (splits nums)]"
0 0 17 29 1 #"\n"
0 0 17 3 46 #"               [left   (combine (car halves))]"
0 0 17 29 1 #"\n"
0 0 17 3 46 #"               [right  (combine (cdr halves))]"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"               [op     ops])"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"          (yield `("
0 0 17 3 23 #",op ,left ,right))))]))"
0 0 17 29 1 #"\n"
0 0 17 3 1 #" "
0 0 17 29 1 #"\n"
0 0 17 3 21 #"(define (eval-expr e)"
0 0 17 29 1 #"\n"
0 0 17 3 52 #"  (with-handlers ([exn:fail:contract:divide-by-zero?"
0 0 17 29 1 #"\n"
0 0 17 3 42 #"                   (lambda (exn) +inf.0)])"
0 0 17 29 1 #"\n"
0 0 17 3 14 #"    (eval e)))"
0 0 17 29 1 #"\n"
0 0 17 3 1 #" "
0 0 17 29 1 #"\n"
0 0 17 3 34 #"(define (solve n1 n2 n3 n4 target)"
0 0 17 29 1 #"\n"
0 0 17 3 20 #"  (delete-duplicates"
0 0 17 29 1 #"\n"
0 0 17 3 52 #"   (for*/list ([p (permutations (list n1 n2 n3 n4))]"
0 0 17 29 1 #"\n"
0 0 17 3 30 #"               [l (combine p)]"
0 0 17 29 1 #"\n"
0 0 17 3 47 #"               #:when (= target (eval-expr l)))"
0 0 17 29 1 #"\n"
0 0 17 3 9 #"     l)))"
0 0 17 29 1 #"\n"
0 0 17 3 23 #" (solve 10 10 10 5 200)"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 16 #"(require srfi/1)"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"(require racket/generator)"
0 0 17 29 1 #"\n"
0 0 17 3 1 #" "
0 0 17 29 1 #"\n"
0 0 17 3 35 #"(define (bool<= x y) (implies x y))"
0 0 17 29 1 #"\n"
0 0 17 3 1 #" "
0 0 17 29 1 #"\n"
0 0 17 3 26 #";; Monadic bind for lists."
0 0 17 29 1 #"\n"
0 0 17 3 17 #"(define-syntax-ru"
0 0 17 3 36 #"le (let*/list (clause ...) body ...)"
0 0 17 29 1 #"\n"
0 0 17 3 51 #"  (for*/list (clause ... [x (let () body ...)]) x))"
0 0 17 29 1 #"\n"
0 0 17 3 1 #" "
0 0 17 29 1 #"\n"
0 0 17 3 29 #";; lexical ordering on lists."
0 0 17 29 1 #"\n"
0 0 17 3 30 #"(define (list<= l1 l2 [<= <=])"
0 0 17 29 1 #"\n"
0 0 17 3 17 #"  (match* (l1 l2)"
0 0 17 29 1 #"\n"
0 0 17 3 16 #"    [('() _) #t]"
0 0 17 29 1 #"\n"
0 0 17 3 16 #"    [(_ '()) #f]"
0 0 17 29 1 #"\n"
0 0 17 3 30 #"    [((cons x xs) (cons y ys))"
0 0 17 29 1 #"\n"
0 0 17 3 21 #"     (match* [(<= x y"
0 0 17 3 11 #") (<= y x)]"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"       [(#t #t) (list<= xs ys <=)]"
0 0 17 29 1 #"\n"
0 0 17 3 20 #"       [(x _) x])]))"
0 0 17 29 1 #"\n"
0 0 17 3 1 #" "
0 0 17 29 1 #"\n"
0 0 17 3 1 #"\f"
0 0 17 29 1 #"\n"
0 0 17 3 34 #";;; ok, now we start doing things."
0 0 17 29 1 #"\n"
0 0 17 3 23 #"(define ops '(+ - * /))"
0 0 17 29 1 #"\n"
0 0 17 3 1 #" "
0 0 17 29 1 #"\n"
0 0 17 3 25 #"(define (commutative? op)"
0 0 17 29 1 #"\n"
0 0 17 3 31 #"  (or (eq? '+ op) (eq? '* op)))"
0 0 17 29 1 #"\n"
0 0 17 3 1 #" "
0 0 17 29 1 #"\n"
0 0 17 3 26 #"(define (all-partitions l)"
0 0 17 29 1 #"\n"
0 0 17 3 10 #"  (match l"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"    ['() (list (list '() "
0 0 17 3 6 #"'()))]"
0 0 17 29 1 #"\n"
0 0 17 3 56 #"    [(cons x xs) (let*/list ([part (all-partitions xs)])"
0 0 17 29 1 #"\n"
0 0 17 3 51 #"                   (match-define (list as bs) part)"
0 0 17 29 1 #"\n"
0 0 17 3 46 #"                   (list (list (cons x as) bs)"
0 0 17 29 1 #"\n"
0 0 17 3 51 #"                         (list as (cons x bs))))]))"
0 0 17 29 1 #"\n"
0 0 17 3 1 #" "
0 0 17 29 1 #"\n"
0 0 17 3 22 #"(define (partitions l)"
0 0 17 29 1 #"\n"
0 0 17 3 65
#"  (filter (lambda (l) (not (ormap null? l))) (all-partitions l)))"
0 0 17 29 1 #"\n"
0 0 17 3 1 #" "
0 0 17 29 1 #"\n"
0 0 17 3 34 #"(define (commutative-partitions l)"
0 0 17 29 1 #"\n"
0 0 17 3 35 #"  (for*/list ([part (partitions l)]"
0 0 17 29 1 #"\n"
0 0 17 3 57 #"              #:when (list<= (first part) (second part)))"
0 0 17 29 1 #"\n"
0 0 17 3 10 #"    part))"
0 0 17 29 1 #"\n"
0 0 17 3 1 #" "
0 0 17 29 1 #"\n"
0 0 17 3 62
#";; produces a sequence (usually lazy) of all possible combinat"
0 0 17 3 14 #"ions of `nums'"
0 0 17 29 1 #"\n"
0 0 17 3 28 #";; using operators in `ops'."
0 0 17 29 1 #"\n"
0 0 17 3 22 #"(define (combine nums)"
0 0 17 29 1 #"\n"
0 0 17 3 13 #"  (match nums"
0 0 17 29 1 #"\n"
0 0 17 3 70
(
 #"    ['() (error \"impossible\")] ;; should never get called recursiv"
 #"ely."
) 0 0 17 29 1 #"\n"
0 0 17 3 23 #"    [(list x) (list x)]"
0 0 17 29 1 #"\n"
0 0 17 3 20 #"    [_ (in-generator"
0 0 17 29 1 #"\n"
0 0 17 3 23 #"        (for* ([op ops]"
0 0 17 29 1 #"\n"
0 0 17 3 35 #"               [halves (if (commuta"
0 0 17 3 9 #"tive? op)"
0 0 17 29 1 #"\n"
0 0 17 3 56 #"                           (commutative-partitions nums)"
0 0 17 29 1 #"\n"
0 0 17 3 46 #"                           (partitions nums))]"
0 0 17 29 1 #"\n"
0 0 17 3 49 #"               [left   (combine (first  halves))]"
0 0 17 29 1 #"\n"
0 0 17 3 50 #"               [right  (combine (second halves))])"
0 0 17 29 1 #"\n"
0 0 17 3 41 #"          (yield `(,op ,left ,right))))])"
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 3 1 #" "
0 0 17 29 1 #"\n"
0 0 17 3 21 #"(define (eval-expr e)"
0 0 17 29 1 #"\n"
0 0 17 3 52 #"  (with-handlers ([exn:fail:contract:divide-by-zero?"
0 0 17 29 1 #"\n"
0 0 17 3 42 #"                   (lambda (exn) +inf.0)])"
0 0 17 29 1 #"\n"
0 0 17 3 14 #"    (eval e)))"
0 0 17 29 1 #"\n"
0 0 17 3 1 #" "
0 0 17 29 1 #"\n"
0 0 17 3 34 #"(define (solve n1 n2 n3 n4 target)"
0 0 17 29 1 #"\n"
0 0 17 3 20 #"  (delete-duplicates"
0 0 17 29 1 #"\n"
0 0 17 3 47 #"   (for*/list ([l (combine (list n1 n2 n3 n4))]"
0 0 17 29 1 #"\n"
0 0 17 3 47 #"               #:when (= target (eval-expr l)))"
0 0 17 29 1 #"\n"
0 0 17 3 9 #"     l)))"
0 0 17 29 1 #"\n"
0 0 17 3 1 #" "
0 0 17 29 1 #"\n"
0 0 17 3 35 #"(pretty-print (solve 6 6 5 2 17))|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 6 #"srfi/1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"ops"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"/"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"combine4"
0 0 24 3 1 #" "
0 0 14 3 2 #"n1"
0 0 24 3 1 #" "
0 0 14 3 2 #"n2"
0 0 24 3 1 #" "
0 0 14 3 2 #"n3"
0 0 24 3 1 #" "
0 0 14 3 2 #"n4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"concatenate"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n4"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"e"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"combine3"
0 0 24 3 1 #" "
0 0 14 3 2 #"n1"
0 0 24 3 1 #" "
0 0 14 3 2 #"n2"
0 0 24 3 1 #" "
0 0 14 3 2 #"n3"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 3 #"ops"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"combine3"
0 0 24 3 1 #" "
0 0 14 3 2 #"n1"
0 0 24 3 1 #" "
0 0 14 3 2 #"n2"
0 0 24 3 1 #" "
0 0 14 3 2 #"n3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"concatenate"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n3"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"e"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"combine2"
0 0 24 3 1 #" "
0 0 14 3 2 #"n1"
0 0 24 3 1 #" "
0 0 14 3 2 #"n2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 3 #"ops"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"combine2"
0 0 24 3 1 #" "
0 0 14 3 2 #"n1"
0 0 24 3 1 #" "
0 0 14 3 2 #"n2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n2"
0 0 24 3 3 #")) "
0 0 14 3 3 #"ops"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"eval-expr"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 13 #"with-handlers"
0 0 24 3 3 #" (["
0 0 14 3 33 #"exn:fail:contract:divide-by-zero?"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exn"
0 0 24 3 2 #") "
0 0 21 3 6 #"+inf.0"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"solve"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"n1"
0 0 24 3 1 #" "
0 0 14 3 2 #"n2"
0 0 24 3 1 #" "
0 0 14 3 2 #"n3"
0 0 24 3 1 #" "
0 0 14 3 2 #"n4"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 5 #"perms"
0 0 24 3 2 #" ("
0 0 14 3 12 #"permutations"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 14 3 2 #"n1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n2"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n3"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n4"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 10 #"expr-lists"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"perm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 8 #"combine4"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"perm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"perm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 4 #"perm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 6 #"fourth"
0 0 24 3 1 #" "
0 0 14 3 4 #"perm"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 14 3 5 #"perms"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 9 #"val-lists"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"expr-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 9 #"eval-expr"
0 0 24 3 1 #" "
0 0 14 3 9 #"expr-list"
0 0 24 3 3 #")) "
0 0 14 3 10 #"expr-lists"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 79
(
 #";; For each perm, see if there's a val in its val-list that is equal"
 #" to target."
) 0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 63
#";; If so, hold on to the corresponding expr from its expr-list."
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 9 #"solutions"
0 0 24 3 2 #" ("
0 0 14 3 10 #"filter-map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"perm"
0 0 24 3 1 #" "
0 0 14 3 9 #"expr-list"
0 0 24 3 1 #" "
0 0 14 3 8 #"val-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 3 #"idx"
0 0 24 3 2 #" ("
0 0 14 3 10 #"list-index"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"elem"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 62
#"                                                             ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 1 #" "
0 0 14 3 6 #"target"
0 0 24 3 3 #")) "
0 0 14 3 8 #"val-list"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 3 #"idx"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"expr-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"idx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                          "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 14 3 5 #"perms"
0 0 24 3 1 #" "
0 0 14 3 10 #"expr-lists"
0 0 24 3 1 #" "
0 0 14 3 9 #"val-lists"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 17 #"delete-duplicates"
0 0 24 3 1 #" "
0 0 14 3 9 #"solutions"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"pretty-print"
0 0 24 3 2 #" ("
0 0 14 3 5 #"solve"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 2 #"17"
0 0 24 3 2 #"))"
0           0
